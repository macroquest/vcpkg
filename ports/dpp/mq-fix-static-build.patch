diff --git a/cmake/FindOpus.cmake b/cmake/FindOpus.cmake
index ba231669..0c1ed844 100644
--- a/cmake/FindOpus.cmake
+++ b/cmake/FindOpus.cmake
@@ -2,31 +2,38 @@
 #  OPUS_INCLUDE_DIRS - the opus include directory
 #  OPUS_LIBRARIES - The libraries needed to use opus
 
-find_path(OPUS_INCLUDE_DIRS
-	NAMES opus/opus.h
-	PATH_SUFFIXES include
-)
-if(OPUS_INCLUDE_DIRS)
-	set(HAVE_OPUS_OPUS_H 1)
-endif()
-
-if(OPUS_USE_STATIC_LIBS)
-	find_library(OPUS_LIBRARIES NAMES "libopus.a")
+if(WIN32)
+	if(OPUS_USE_STATIC_LIBS)
+		find_package(opus CONFIG REQUIRED STATIC)
+	else()
+		find_package(opus CONFIG REQUIRED)
+	endif()
 else()
-	find_library(OPUS_LIBRARIES NAMES opus)
-endif()
-
-if(OPUS_LIBRARIES)
+	find_path(OPUS_INCLUDE_DIRS
+		NAMES opus/opus.h
+		PATH_SUFFIXES include
+	)
 	if(OPUS_USE_STATIC_LIBS)
-		find_library(LIBM NAMES "libm.a" "libm.tbd")
+		find_library(OPUS_LIBRARIES NAMES "libopus.a")
 	else()
-		find_library(LIBM NAMES m)
+		find_library(OPUS_LIBRARIES NAMES opus)
 	endif()
-	if(LIBM)
-		list(APPEND OPUS_LIBRARIES ${LIBM})
+	if(OPUS_LIBRARIES)
+		if(OPUS_USE_STATIC_LIBS)
+			find_library(LIBM NAMES "libm.a" "libm.tbd")
+		else()
+			find_library(LIBM NAMES m)
+		endif()
+		if(LIBM)
+			list(APPEND OPUS_LIBRARIES ${LIBM})
+		endif()
 	endif()
 endif()
 
+if(OPUS_INCLUDE_DIRS)
+	set(HAVE_OPUS_OPUS_H 1)
+endif()
+
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(Opus
 	DEFAULT_MSG
diff --git a/library-vcpkg/CMakeLists.txt b/library-vcpkg/CMakeLists.txt
index 6dcea1d6..b5711597 100644
--- a/library-vcpkg/CMakeLists.txt
+++ b/library-vcpkg/CMakeLists.txt
@@ -50,13 +50,27 @@ target_link_options(
 	"$<$<PLATFORM_ID:Windows>:/DEBUG>"
 )
 
-add_compile_definitions(HAVE_VOICE)
+if(BUILD_VOICE_SUPPORT)
+	add_compile_definitions(HAVE_VOICE)
+endif()
+
+if(NOT BUILD_SHARED_LIBS)
+	find_package(nlohmann_json CONFIG REQUIRED STATIC)
+	if(BUILD_VOICE_SUPPORT)
+		find_package(Opus CONFIG REQUIRED STATIC)
+	endif()
+	find_package(unofficial-sodium CONFIG REQUIRED STATIC)
+	find_package(ZLIB REQUIRED STATIC)
+else()
+	find_package(nlohmann_json CONFIG REQUIRED)
+	if(BUILD_VOICE_SUPPORT)
+		find_package(Opus CONFIG REQUIRED)
+	endif()
+	find_package(unofficial-sodium CONFIG REQUIRED)
+	find_package(ZLIB REQUIRED)
+endif()
 
-find_package(nlohmann_json CONFIG REQUIRED)
 find_package(OpenSSL REQUIRED)
-find_package(Opus CONFIG REQUIRED)
-find_package(unofficial-sodium CONFIG REQUIRED)
-find_package(ZLIB REQUIRED)
 
 target_link_libraries(
 	"${LIB_NAME}" PUBLIC
diff --git a/library/CMakeLists.txt b/library/CMakeLists.txt
index ed667aff..e8d89b8e 100644
--- a/library/CMakeLists.txt
+++ b/library/CMakeLists.txt
@@ -22,42 +22,6 @@ endif()
 
 add_compile_definitions(DPP_OS=${CMAKE_SYSTEM_NAME})
 
-if(WIN32 AND NOT MINGW)
-	if (NOT WINDOWS_32_BIT)
-		message("-- Building for windows with precompiled packaged dependencies")
-		#set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
-		set(ZLIB_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib")
-		set(ZLIB_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../win32/include")
-		set(OPENSSL_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../win32/include")
-		set(OPENSSL_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib")
-		#ADD_DEFINITIONS(/bigobj)
-
-		link_libraries("${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libssl.lib")
-		link_libraries("${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libcrypto.lib")
-		link_libraries("${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/zlib.lib")
-		link_libraries("${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libsodium.lib")
-		link_libraries("${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/opus.lib")
-
-		set(OPUS_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/../win32/include")
-		set(OPUS_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/opus.lib")
-		set(sodium_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../win32/include")
-		set(sodium_LIBRARY_DEBUG "${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libsodium.lib")
-		set(sodium_LIBRARY_RELEASE "${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libsodium.lib")
-		set(HAVE_OPUS_OPUS_H "${CMAKE_CURRENT_SOURCE_DIR}/../win32/include/opus/opus.h")
-		set(OPUS_FOUND 1)
-		SET(sodium_VERSION_STRING "win32 bundled")
-
-		include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../win32/include")
-
-		add_compile_definitions(OPENSSL_SYS_WIN32)
-		add_compile_definitions(_WINSOCK_DEPRECATED_NO_WARNINGS)
-		add_compile_definitions(WIN32_LEAN_AND_MEAN)
-		add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
-		add_compile_definitions(_CRT_NONSTDC_NO_DEPRECATE)
-
-	endif()
-endif()
-
 if (UNIX)
 	message("-- Checking for ability to update autogenerated files")
 	execute_process(
@@ -73,26 +37,21 @@ if (UNIX)
 			WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.."
 			COMMAND php buildtools/make_struct.php "\\Dpp\\Generator\\SyncGenerator"
 		)
- 		set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/../include/dpp/cluster_sync_calls.h" PROPERTIES GENERATED TRUE ) 
+		set_source_files_properties( "${CMAKE_CURRENT_SOURCE_DIR}/../include/dpp/cluster_sync_calls.h" PROPERTIES GENERATED TRUE ) 
 	else()
 		message("-- Autogeneration is not available")
- 	endif()
+	endif()
 endif()
 
 if(NOT BUILD_SHARED_LIBS)
-	if(UNIX)
-		message("-- Building static library.")
-		
-		if(UNIX AND NOT APPLE)
-			set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
-		endif()
-		
-		set(OPENSSL_USE_STATIC_LIBS ON)
-		set(sodium_USE_STATIC_LIBS ON)
-		set(OPUS_USE_STATIC_LIBS TRUE)
-	else()
-		message(WARNING "-- Building of static library not supported on non UNIX systems.")
+	message("-- Building static library.")
+	if(UNIX AND NOT APPLE)
+		set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
 	endif()
+
+	set(OPENSSL_USE_STATIC_LIBS ON)
+	set(sodium_USE_STATIC_LIBS ON)
+	set(OPUS_USE_STATIC_LIBS TRUE)
 endif()
 
 include("${CMAKE_CURRENT_SOURCE_DIR}/../cmake/colour.cmake")
@@ -105,16 +64,16 @@ if (BUILD_VOICE_SUPPORT)
 		else()
 			message("-- Could not detect ${Green}libsodium${ColourReset} due to missing ${Green}pkgconfig${ColourReset}. VOICE support will be ${Red}disabled${ColourReset}")
 		endif()
-      		include("${CMAKE_CURRENT_SOURCE_DIR}/../cmake/FindOpus.cmake")
+		include("${CMAKE_CURRENT_SOURCE_DIR}/../cmake/FindOpus.cmake")
 	endif()
 
 	if(DEFINED OPUS_FOUND)
 		message("-- Found Opus ${Green}${OPUS_LIBRARIES}${ColourReset}")
 		if(PKG_CONFIG_FOUND AND DEFINED sodium_VERSION_STRING)
 			add_compile_definitions(HAVE_VOICE)
-		
+
 			message("-- Sodium ${Green}${sodium_VERSION_STRING}${ColourReset}")
-		
+
 			set(HAVE_VOICE 1)
 		endif()
 	endif()
@@ -133,9 +92,7 @@ string(ASCII 27 Esc)
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 
 find_package(Threads REQUIRED)
-if(MINGW OR NOT WIN32)
-	find_package(ZLIB REQUIRED)
-endif(MINGW OR NOT WIN32)
+find_package(ZLIB REQUIRED)
 
 if(APPLE)
 	if(CMAKE_APPLE_SILICON_PROCESSOR EQUAL arm64)
@@ -143,12 +100,8 @@ if(APPLE)
 	else()
 		set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl")
 	endif()
-	find_package(OpenSSL REQUIRED)
-else()
-	if(MINGW OR NOT WIN32)
-		find_package(OpenSSL REQUIRED)
-	endif()
 endif()
+find_package(OpenSSL REQUIRED)
 
 include_directories(${OPENSSL_INCLUDE_DIR} ${ZLIB_INCLUDE_DIRS})
 
@@ -191,7 +144,7 @@ file(GLOB subdirlist ${modules_dir}/dpp)
 foreach (fullmodname ${subdirlist})
     get_filename_component(modname ${fullmodname} NAME)
     set (modsrc "")
-	
+
 	file(GLOB modsrc "${modules_dir}/dpp/*.cpp" "${modules_dir}/dpp/events/*.cpp" "${modules_dir}/dpp/cluster/*.cpp" "${modules_dir}/dpp/*.rc")
 
 	if(BUILD_SHARED_LIBS)
@@ -210,31 +163,14 @@ foreach (fullmodname ${subdirlist})
 		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include/dpp>
 	)
 
-	if (WIN32 AND NOT MINGW)
-		if (NOT WINDOWS_32_BIT)
-			target_link_libraries(${modname} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libssl.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libcrypto.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/libsodium.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/opus.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/lib/zlib.lib")
-		else()
-			target_link_libraries(${modname} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/lib/libssl.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/lib/libcrypto.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/lib/libsodium.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/lib/opus.lib"
-				"${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/lib/zlib.lib")
-		endif()
-
-	else()
-		target_link_libraries(${modname} PUBLIC ${OPENSSL_CRYPTO_LIBRARY} ${OPENSSL_SSL_LIBRARY} ${ZLIB_LIBRARIES})
-		if (MINGW)
-			target_link_libraries(${modname} PUBLIC wsock32 ws2_32 crypt32)
-		endif ()
+	target_link_libraries(${modname} PUBLIC ${OPENSSL_CRYPTO_LIBRARY} ${OPENSSL_SSL_LIBRARY} ${ZLIB_LIBRARIES})
+	if (MINGW OR WIN32)
+		target_link_libraries(${modname} PUBLIC wsock32 ws2_32 crypt32)
 	endif()
 
 	if (HAVE_VOICE)
 		target_link_libraries(${modname} PUBLIC ${sodium_LIBRARY_RELEASE} ${OPUS_LIBRARIES})
-		
+
 		include_directories(${OPUS_INCLUDE_DIRS} ${sodium_INCLUDE_DIR})
 	endif()
 endforeach()
@@ -292,22 +228,6 @@ if(DPP_CORO)
 	execute_process(WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/.."
 					COMMAND php buildtools/make_struct.php "\\Dpp\\Generator\\CoroGenerator")
 endif()
-	
-if(WIN32 AND NOT MINGW)
-	if (NOT WINDOWS_32_BIT)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/bin/zlib1.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/bin/libcrypto-1_1-x64.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/bin/libssl-1_1-x64.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/bin/libsodium.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/bin/opus.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-	else()
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/bin/zlib1.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/bin/libcrypto-1_1.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/bin/libssl-1_1.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/bin/libsodium.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-		configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../win32/32/bin/opus.dll" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" COPYONLY)
-	endif()
-endif()
 
 if(DPP_INSTALL)
 	if(NOT WIN32)
diff --git a/src/dpp/user.cpp b/src/dpp/user.cpp
index 0f5bce1f..f3f45e62 100644
--- a/src/dpp/user.cpp
+++ b/src/dpp/user.cpp
@@ -22,7 +22,6 @@
 #include <dpp/discordevents.h>
 #include <dpp/json.h>
 #include <dpp/stringops.h>
-#include "user.h"
 
 using json = nlohmann::json;
 
